name: production

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: production
  cancel-in-progress: false

jobs:
  terraform-gcp:
    name: terraform-gcp
    runs-on: ubuntu-latest
    environment: production

    outputs:
      primary_cluster_name: ${{ steps.extract-output.outputs.primary_cluster_name }}
      primary_ingress_ip: ${{ steps.extract-output.outputs.primary_ingress_ip }}
  
    defaults:
      run:
        shell: bash
    
    env:
      TF_VAR_GCP_PROJECT_ID: ${{ vars.TF_VAR_GCP_PROJECT_ID }}
      TF_VAR_GCP_REGION_ID: ${{ vars.TF_VAR_GCP_REGION_ID }}
      TF_VAR_GCP_LOCATION_IDS: ${{ vars.TF_VAR_GCP_LOCATION_IDS }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: 'Log in Google Cloud SDK'
      uses: 'google-github-actions/auth@v2'
      with:
        credentials_json: ${{ secrets.SECRET_GCP_CREDENTIALS_JSON }}

    - name: 'Set up Google Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v2'
      with:
        version: '>= 363.0.0'
        project_id: ${{ env.TF_VAR_GCP_PROJECT_ID }}

    - name: 'Report Google Environment'
      run: 'echo "${{ env.TF_VAR_GCP_PROJECT_ID }}:${{ env.TF_VAR_GCP_REGION_ID }}"'

    - name: 'Use gcloud CLI'
      run: 'gcloud info'

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Terraform Init (GCP)
      working-directory: ./gcp
      run: |
        terraform init \
          -backend-config="bucket=${{ vars.VAR_TFSTATE_BUCKET }}" \
          -backend-config="key=${{ vars.VAR_TFSTATE_KEY }}-gcp" \
          -backend-config="endpoint=${{ vars.VAR_TFSTATE_ENDPOINT }}" \
          -backend-config="access_key=${{ secrets.SECRET_TFSTATE_ACCESS_KEY }}" \
          -backend-config="secret_key=${{ secrets.SECRET_TFSTATE_SECRET_KEY }}" 
          
    - name: Terraform Format (GCP)
      working-directory: ./gcp
      run: terraform fmt -check --recursive

    - name: Terraform Plan (GCP)
      working-directory: ./gcp
      run: terraform plan -input=false

    - name: Terraform Apply (GCP)
      if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
      working-directory: ./gcp
      run: terraform apply -auto-approve -input=false
    
    - name: Extract Output (GCP)
      id: extract-output
      working-directory: ./gcp
      run: |
        echo "primary_ip_address=$(terraform output -raw primary_ip_address)" >> "$GITHUB_OUTPUT"
        echo "primary_ip_name=$(terraform output -raw primary_ip_name)" >> "$GITHUB_OUTPUT"
        echo "primary_cluster_name=$(terraform output -raw primary_cluster_name)" >> "$GITHUB_OUTPUT"
        echo "primary_cluster_region=$(terraform output -raw primary_cluster_region)" >> "$GITHUB_OUTPUT"
  
  terraform-gke:
    name: terraform-gke
    needs: terraform-gcp
    runs-on: ubuntu-latest
    environment: production

    defaults:
      run:
        shell: bash
    
    env:
      TF_VAR_GCP_PROJECT_ID: ${{ vars.TF_VAR_GCP_PROJECT_ID }}
      TF_VAR_GCP_REGION_ID: ${{ vars.TF_VAR_GCP_REGION_ID }}
      TF_VAR_CF_DOMAIN_NAME: ${{ vars.TF_VAR_CF_DOMAIN_NAME }}
      TF_VAR_GCP_GKE_CLUSTER_NAME: ${{ needs.terraform-gcp.outputs.primary_cluster_name }}
      TF_VAR_GCP_PRIMARY_IP_ADDRESS: ${{ needs.terraform-gcp.outputs.primary_ip_address }}
      TF_VAR_GCP_PRIMARY_IP_NAME: ${{ needs.terraform-gcp.outputs.primary_ip_name }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: 'Log in Google Cloud SDK'
      uses: 'google-github-actions/auth@v2'
      with:
        credentials_json: ${{ secrets.SECRET_GCP_CREDENTIALS_JSON }}

    - name: 'Set up Google Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v2'
      with:
        version: '>= 363.0.0'
        project_id: ${{ env.TF_VAR_GCP_PROJECT_ID }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Terraform Init (GKE)
      working-directory: ./gke
      run: |
        terraform init \
          -backend-config="bucket=${{ vars.VAR_TFSTATE_BUCKET }}" \
          -backend-config="key=${{ vars.VAR_TFSTATE_KEY }}-gke" \
          -backend-config="endpoint=${{ vars.VAR_TFSTATE_ENDPOINT }}" \
          -backend-config="access_key=${{ secrets.SECRET_TFSTATE_ACCESS_KEY }}" \
          -backend-config="secret_key=${{ secrets.SECRET_TFSTATE_SECRET_KEY }}" 
          
    - name: Terraform Format (GKE)
      working-directory: ./gke
      run: terraform fmt -check --recursive

    - name: Terraform Plan (GKE)
      working-directory: ./gke
      run: terraform plan -input=false

    - name: Terraform Apply (GKE)
      if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
      working-directory: ./gke
      run: terraform apply -auto-approve -input=false

    - name: Extract Output (GKE)
      id: extract-output
      working-directory: ./gke
      run: |
        echo "primary_ingress_ip=$(terraform output -raw primary_ingress_ip)" >> "$GITHUB_OUTPUT"
        echo "primary_ingress_name=$(terraform output -raw primary_ingress_name)" >> "$GITHUB_OUTPUT"
  
  set-domain:
    name: domain
    needs: [terraform-gcp, terraform-gke]
    runs-on: ubuntu-latest
    environment: production

    defaults:
      run:
        shell: bash

    env:
      TF_VAR_CF_DOMAIN_NAME: ${{ vars.TF_VAR_CF_DOMAIN_NAME }}
      LOCAL_ENV_PRIMARY_INGRESS_IP: ${{ needs.terraform-gke.outputs.primary_ingress_ip }}

    steps:
      - name: Get Current DNS Record
        id: get-dns
        run: |
          DNS_RECORD_RESPONSE=$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones/${{ secrets.SECRET_CF_ZONE_ID }}/dns_records?name=${{ env.TF_VAR_CF_DOMAIN_NAME }}" \
            -H "Authorization: Bearer ${{ secrets.SECRET_CF_DNS_TOKEN }}" \
            -H "Content-Type: application/json")
          DNS_RECORD_ID=$(echo $DNS_RECORD_RESPONSE | jq -r '.result[0].id // empty')
          DNS_RECORD_IP=$(echo $DNS_RECORD_RESPONSE | jq -r '.result[0].content // empty')
          echo "DNS_RECORD_ID=${DNS_RECORD_ID}" >> "$GITHUB_ENV"
          echo "DNS_RECORD_IP=${DNS_RECORD_IP}" >> "$GITHUB_ENV"

      - name: Update or Create DNS Record
        run: |
          if [ "$LOCAL_ENV_PRIMARY_INGRESS_IP" = "$DNS_RECORD_IP" ]; then
            echo "Keeping existing DNS record... ($DNS_RECORD_IP = ${{ env.TF_VAR_CF_DOMAIN_NAME }} = $DNS_RECORD_ID)"
          elif [ -n "$DNS_RECORD_ID" ]; then
            echo "Updating existing DNS record... ($LOCAL_ENV_PRIMARY_INGRESS_IP > ${{ env.TF_VAR_CF_DOMAIN_NAME }} > $DNS_RECORD_ID)"
            curl -X PUT "https://api.cloudflare.com/client/v4/zones/${{ secrets.SECRET_CF_ZONE_ID }}/dns_records/$DNS_RECORD_ID" \
              -H "Authorization: Bearer ${{ secrets.SECRET_CF_DNS_TOKEN }}" \
              -H "Content-Type: application/json" \
              --data '{
                "type": "A",
                "name": "'"${{ env.TF_VAR_CF_DOMAIN_NAME }}"'",
                "content": "'"$LOCAL_ENV_PRIMARY_INGRESS_IP"'",
                "ttl": 300,
                "proxied": false
              }'
          else
            echo "Creating new DNS record... ($LOCAL_ENV_PRIMARY_INGRESS_IP > ${{ vars.VAR_CF_DOMAIN }})"
            curl -X POST "https://api.cloudflare.com/client/v4/zones/${{ secrets.SECRET_CF_ZONE_ID }}/dns_records" \
              -H "Authorization: Bearer ${{ secrets.SECRET_CF_DNS_TOKEN }}" \
              -H "Content-Type: application/json" \
              --data '{
                "type": "A",
                "name": "'"${{ env.TF_VAR_CF_DOMAIN_NAME }}"'",
                "content": "'"$LOCAL_ENV_PRIMARY_INGRESS_IP"'",
                "ttl": 300,
                "proxied": false
              }'
          fi
